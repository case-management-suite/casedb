// Code generated by MockGen. DO NOT EDIT.
// Source: api.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/case-management-suite/models"
	gomock "github.com/golang/mock/gomock"
)

// MockCaseStorageService is a mock of CaseStorageService interface.
type MockCaseStorageService struct {
	ctrl     *gomock.Controller
	recorder *MockCaseStorageServiceMockRecorder
}

// MockCaseStorageServiceMockRecorder is the mock recorder for MockCaseStorageService.
type MockCaseStorageServiceMockRecorder struct {
	mock *MockCaseStorageService
}

// NewMockCaseStorageService creates a new mock instance.
func NewMockCaseStorageService(ctrl *gomock.Controller) *MockCaseStorageService {
	mock := &MockCaseStorageService{ctrl: ctrl}
	mock.recorder = &MockCaseStorageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCaseStorageService) EXPECT() *MockCaseStorageServiceMockRecorder {
	return m.recorder
}

// FindAllCases mocks base method.
func (m *MockCaseStorageService) FindAllCases(spec models.CaseRecordSpec) ([]models.CaseRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAllCases", spec)
	ret0, _ := ret[0].([]models.CaseRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAllCases indicates an expected call of FindAllCases.
func (mr *MockCaseStorageServiceMockRecorder) FindAllCases(spec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAllCases", reflect.TypeOf((*MockCaseStorageService)(nil).FindAllCases), spec)
}

// FindCase mocks base method.
func (m *MockCaseStorageService) FindCase(id models.Identifier, spec models.CaseRecordSpec) (models.CaseRecord, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCase", id, spec)
	ret0, _ := ret[0].(models.CaseRecord)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindCase indicates an expected call of FindCase.
func (mr *MockCaseStorageServiceMockRecorder) FindCase(id, spec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCase", reflect.TypeOf((*MockCaseStorageService)(nil).FindCase), id, spec)
}

// GetCaseContext mocks base method.
func (m *MockCaseStorageService) GetCaseContext(id models.Identifier, spec models.CaseActionSpec) (models.CaseAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCaseContext", id, spec)
	ret0, _ := ret[0].(models.CaseAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCaseContext indicates an expected call of GetCaseContext.
func (mr *MockCaseStorageServiceMockRecorder) GetCaseContext(id, spec interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCaseContext", reflect.TypeOf((*MockCaseStorageService)(nil).GetCaseContext), id, spec)
}

// GetContextForCase mocks base method.
func (m *MockCaseStorageService) GetContextForCase(caseId models.Identifier) ([]models.CaseAction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContextForCase", caseId)
	ret0, _ := ret[0].([]models.CaseAction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContextForCase indicates an expected call of GetContextForCase.
func (mr *MockCaseStorageServiceMockRecorder) GetContextForCase(caseId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContextForCase", reflect.TypeOf((*MockCaseStorageService)(nil).GetContextForCase), caseId)
}

// SaveCaseContext mocks base method.
func (m *MockCaseStorageService) SaveCaseContext(caseContext *models.CaseAction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCaseContext", caseContext)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCaseContext indicates an expected call of SaveCaseContext.
func (mr *MockCaseStorageServiceMockRecorder) SaveCaseContext(caseContext interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCaseContext", reflect.TypeOf((*MockCaseStorageService)(nil).SaveCaseContext), caseContext)
}

// SaveNewCase mocks base method.
func (m *MockCaseStorageService) SaveNewCase(id models.Identifier) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveNewCase", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveNewCase indicates an expected call of SaveNewCase.
func (mr *MockCaseStorageServiceMockRecorder) SaveNewCase(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveNewCase", reflect.TypeOf((*MockCaseStorageService)(nil).SaveNewCase), id)
}

// UpdateCase mocks base method.
func (m *MockCaseStorageService) UpdateCase(caseRecord *models.CaseRecord) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCase", caseRecord)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCase indicates an expected call of UpdateCase.
func (mr *MockCaseStorageServiceMockRecorder) UpdateCase(caseRecord interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCase", reflect.TypeOf((*MockCaseStorageService)(nil).UpdateCase), caseRecord)
}
